frontend:run-tests:
  needs: []
  stage: test
  extends: .default
  script:
    - npx nx run frontend:test
  artifacts:
    paths:
      - ./apps/frontend/coverage
    expire_in: 1 week
  only:
    - merge_requests
    - main

frontend:sonarqube-check-mr:
  needs:
    - frontend:run-tests
  stage: analysis
  image:
    name: sonarsource/sonar-scanner-cli:5.0
    entrypoint: ['']
  variables:
    SONAR_USER_HOME: '/apps/frontend/.sonar' # Defines the location of the analysis task cache
    GIT_DEPTH: '0' # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: '${CI_JOB_NAME}'
    paths:
      - /apps/frontend/.sonar/cache
  script:
    - >
      sonar-scanner
      -Dsonar.projectBaseDir=./apps/frontend/
      -Dsonar.pullrequest.key=${CI_MERGE_REQUEST_IID}
      -Dsonar.pullrequest.branch=${CI_MERGE_REQUEST_SOURCE_BRANCH_NAME}
      -Dsonar.pullrequest.base=${CI_MERGE_REQUEST_TARGET_BRANCH_NAME}
  allow_failure: true
  only:
    - merge_requests

frontend:sonarqube-check-main:
  needs:
    - frontend:run-tests
  stage: analysis
  image:
    name: sonarsource/sonar-scanner-cli:5.0
    entrypoint: ['']
  variables:
    SONAR_USER_HOME: '/apps/frontend/.sonar' # Defines the location of the analysis task cache
    GIT_DEPTH: '0' # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: '${CI_JOB_NAME}'
    paths:
      - /apps/frontend/.sonar/cache
  script:
    - sonar-scanner -Dsonar.projectBaseDir=./apps/frontend/
  allow_failure: true
  only:
    - main

frontend:build:
  stage: build
  extends: .default
  script:
    - npx nx run frontend:build --configuration=staging --verbose
  artifacts:
    paths:
      - dist/apps/frontend
  only:
    - merge_requests
    - tags
  except:
    - /^.*rel.*$/

frontend:build:prod:
  stage: build
  extends: .default
  script:
    - npx nx run frontend:build --configuration=production --verbose
  artifacts:
    paths:
      - dist/apps/frontend
  only:
    - /^.*rel.*$/

frontend:archive:
  stage: archive
  image: docker
  services:
    - docker:dind
  before_script:
    - echo "$HARBOR_TOKEN" | docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build --pull --cache-from ${CRI_PATH}/frontend --build-arg APP=frontend -t ${CRI_PATH}/frontend:$CI_COMMIT_TAG -f docker/angular.dockerfile  .
    - docker push ${CRI_PATH}/frontend:$CI_COMMIT_TAG
  rules:
    - if: '$CI_COMMIT_TAG =~ /^.*rel.*$/'
      needs:
        - frontend:build:prod
    - if: '$CI_COMMIT_TAG'
      needs:
        - frontend:build
