services:
  ############
  # DATABASE #
  ############
  postgres:
    image: postgres:17.4
    restart: unless-stopped
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=ap3
    logging:
      options:
        max-size: 10m
        max-file: '3'
    ports:
      - '5432:5432'

  ##################
  # Object Storage #
  ##################
  minio:
    image: minio/minio
    ports:
      - '9000:9000'
      - '9001:9001'
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
      MINIO_DEFAULT_BUCKETS: ap3
    entrypoint: >
      /bin/sh -c '
        isAlive() { curl -sf http://127.0.0.1:9000/minio/health/live; }    # check if Minio is alive
        minio $0 "$@" --quiet & echo $! > /tmp/minio.pid                   # start Minio in the background
        while ! isAlive; do sleep 0.1; done                                # wait until Minio is alive
        mc alias set minio http://127.0.0.1:9000 minioadmin minioadmin     # setup Minio client
        mc mb minio/ap3 || true                                            # create a test bucket
        mc anonymous set public minio/ap3                                  # make the test bucket public
        kill -s INT $(cat /tmp/minio.pid) && rm /tmp/minio.pid             # stop Minio
        while isAlive; do sleep 0.1; done                                  # wait until Minio is stopped
        exec minio $0 "$@"                                                 # start Minio in the foreground
      '
    command: server /data --console-address ":9001"

  ##############
  # BLOCKCHAIN #
  ##############
  blockchain-network:
    build:
      context: ./blockchain/network
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - '8545:8545'

  blockchain-network-setup:
    build:
      context: ./blockchain/network-setup
      dockerfile: Dockerfile
      args:
        DEPLOYMENT_MNEMONIC: 'test test test test test test test test test test test test'
        TOKEN_NAME: TradeReceivable
        TOKEN_SYMBOL: AP3
    depends_on:
      blockchain-network:
        condition: service_started
    environment:
      DEV_NODE_URL: 'http://blockchain-network:8545'

  ##################
  # CPPS-Scheduler #
  ##################
  cpps-scheduler:
    image: container-registry.gitlab.cc-asp.fraunhofer.de/skala/ap3/cpps/ki-und-scheduling/cpps-scheduler:v0.1.5-rc
    logging:
      options:
        max-size: 10m
        max-file: '3'
    ports:
      - '8080:8080'

  #########
  # UTILS #
  #########
  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
      - '5672:5672'
      - '15672:15672'
    environment:
      RABBITMQ_LOGS: '-error'

networks:
  default:
    name: ap2-dev
    driver: bridge
